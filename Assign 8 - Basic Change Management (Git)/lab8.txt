ASSIGNMENT 8: BASIC CHANGE MANAGEMENT

LABORATORY: MANAGING BACKPORTED CHANGE


1. Acquiring a copy of the Git repository
$ git clone https://git.savannah.gnu.org/git/diffutils.git

2. Acquiring log of changes to master branch.
First switch to the git repository
$ cd diffutils
$ git log > git-log.txt
git-log.txt now contains the log of changes

3. Get the list of tags.
$ git tag > git-tags.txt

4. We want to find a specific commit, so take a look inside the git-log.txt.
C-s maint: quote
This locates the commit within the file and next to the commit there is an id
associated with it.

commit 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f
Author: Paul Eggert <eggert@cs.ucla.edu>
Date:   Wed Jan 25 23:46:16 2012 -0800 

We can use git format-patch to create this patch.
$ git format-patch -1 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f --stdout > quote-patch.txt

5. Checkout v3.0 to a new branch.
$ git checkout v3.0 -b v3.0branch
Switched to a new branch 'v3.0branch'

6. Using the patch command:
$ patch -p1 < quote-patch.txt

Several Errors Encountered:
can't find file to patch at input line 62
1 out of 1 hunk ignored
Hunk #1 FAILED at 9.
Hunk #3 FAILED at 60.
2 out of 3 hunks FAILED -- saving rejects to file README.rej
patching file README-hacking
Hunk #1 FAILED at 19.
1 out of 1 hunk FAILED -- saving rejects to file README-hacking.rej
Hunk #1 FAILED at 29.
1 out of 1 hunk FAILED -- saving rejects to file cfg.mk.rej
patching file doc/diagmeet.note
can't find file to patch at input line 249
1 out of 1 hunk ignored
can't find file to patch at input line 262
Hunk #10 FAILED at 876.
Hunk #11 FAILED at 906.
Hunk #12 FAILED at 942.
3 out of 14 hunks FAILED -- saving rejects to file src/diff.c.rej
patching file src/diff.h
Hunk #6 FAILED at 433.
1 out of 9 hunks FAILED -- saving rejects to file src/diff3.c.rej
patching file src/dir.c

7. Looking at git status
$ git status
# On branch v3.0branch
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   NEWS
#	modified:   README
#	modified:   TODO
#	modified:   doc/diagmeet.note
#	modified:   ms/config.bat
#	modified:   ms/config.site
#	modified:   po/en.po
#	modified:   src/analyze.c
#	modified:   src/cmp.c
#	modified:   src/context.c
#	modified:   src/diff.c
#	modified:   src/diff.h
#	modified:   src/diff3.c
#	modified:   src/dir.c
#	modified:   src/ifdef.c
#	modified:   src/io.c
#	modified:   src/sdiff.c
#	modified:   src/side.c
#	modified:   src/system.h
#	modified:   src/util.c
#	modified:   tests/help-version
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	NEWS.orig
#	README-hacking.orig
#	README-hacking.rej
#	README.orig
#	README.rej
#	cfg.mk.orig
#	cfg.mk.rej
#	git-log.txt
#	git-tags.txt
#	ms/config.site.orig
#	quote-patch.txt
#	src/cmp.c.orig
#	src/context.c.orig
#	src/diff.c.orig
#	src/diff.c.rej
#	src/diff.h.orig
#	src/diff3.c.orig
#	src/diff3.c.rej
#	src/dir.c.orig
#	src/sdiff.c.orig
#	src/system.h.orig
#	src/util.c.orig
#	tests/help-version.orig
no changes added to commit (use "git add" and/or "git commit -a")

Seems that many files were changed and some remain untracked.

8. Learned how to use the commands listed.

9. Reverting changes to all files except the .c files.
Opened all files except .c files using: 
$ emacs FILENAME
C-x v u

to revert the changes.
To check if they were changed files, I used C-x v =.
Files Reverted: 
doc/diagmeet.note, ms/config.bat, ms/config.site, NEWS, 
src/diff.h, src/system.h, po/en.po, tests/help-version, README, TODO

Reverting changes in .c files:
src/analyze.c: Reverted comments with replaced grave accents (3 total)
src/cmp.c: Reverted comments (3 total)
src/context.c: Reverted all changes (5 total)
src/diff3.c: Reverted comments (3 total)
src/diff.c: Reverted comments (3 [hunks] total, 1 has 3 lines)
src/ed.c: Nothing reverted
src/ifdef.c: Reverted comment (1 total)
src/io.c: Reverted all changes (2 locations total)
src/normal.c: Nothing reverted
src/sdiff.c: Reverted comments (3 total)
src/side.c: Reverted all changes (3 total)
src/util.c: Reverted comments (7 total)

10. Apply failed patches.
In diff3.c, replace the two grave accents with apostrophes.
In diff.c, replace a total of 11 grave accents with apostrophes.
Complete the above with C-s ` and by searching for keywords found in the
.c.rej files.

11. Removing all the untracked files, use the following command:
$ git clean -f
Output:
Removing NEWS.orig
Removing README-hacking.orig
Removing README-hacking.rej
Removing README.orig
Removing README.rej
Removing cfg.mk.orig
Removing cfg.mk.rej
Removing git-log.txt
Removing git-tags.txt
Removing ms/config.site.orig
Removing quote-patch.txt
Removing src/cmp.c.orig
Removing src/context.c.orig
Removing src/diff.c.orig
Removing src/diff.c.rej
Removing src/diff.h.orig
Removing src/diff3.c.orig
Removing src/diff3.c.rej
Removing src/dir.c.orig
Removing src/sdiff.c.orig
Removing src/system.h.orig
Removing src/util.c.orig
Removing tests/help-version.orig

12. Modified files
$ git status
Output shows 6 modified files.

# On branch v3.0branch
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   src/cmp.c
#	modified:   src/diff.c
#	modified:   src/diff3.c
#	modified:   src/dir.c
#	modified:   src/sdiff.c
#	modified:   src/util.c
#
no changes added to commit (use "git add" and/or "git commit -a")

Create the patch using the following command;
$ git diff > quote-3.0-patch.txt

Check that it is between 300 and 400 lines long:
$ cat quote-3.0-patch.txt | wc -l
It is between 300 and 400 lines long, so we can move on.

13. According to README-hacking, the first command it to run:
$ ./bootstrap

Ending of output mentions: 'Now you can run './configure'.'

However, I am running this on lnxsrv07, so I need to add the additional
patch:
$ emacs server-patch.txt

Copy-pasted the patch file into server-patch.txt.
Apply the patch:
$ patch -p0 < server-patch.txt

Now we can resume with configure:
$ ./configure

The next steps according to README-hacking are to run make and make check:
$ make
$ make check

$ diff . -
Output:
diff: cannot compare '-' to a directory

$ diff --help
Output: expected

The apostrophes appear as required.

14.
Copy the src files into another directory called diffutils-3.0-patch:
$ cp -r src diffutils-3.0-patch
Get the original files again and copy it into another directory (the src files):
$ git clone https://git.savannah.gnu.org/git/diffutils.git temp
$ cp -r temp/src diffutils-3.0
Find the difference:
$ ~/cs35L/Lab8/diffutils/src/diff -pru diffutils-3.0real diffutils-3.0-patch >quote-3.0-test.txt

15.
Inside, we notice that there are differences, but the differences are,
in fact, innocuous because the differences have to do with file names
as well as other minor differences.
