Exercise 1.1
1. (keystrokes not required for this step, simply opening emacs)
2. C-s H T M L
3. C-s s c a v e n g e r Enter M-b
4. C-s s e l f Enter M-b
5. C-s a r r o w Enter M-b
6. C-e
7. C-a
8. Yes, many of the operations can be done using emacs shortcuts such as using M-b to move to the front of a word.
9. No I used emacs commands instead of the arrow keys.
10. C-x C-c

Exercise 1.2
1. (keystrokes not required for this step, simply opening emacs)
2. M-g g 1 9 Enter C-k
3. C-s < ! C-a C-k
4. C-s M-p Enter C-a C-k Down C-k Down C-k
5. C-s M-p Enter C-d C-d C-d C-d C-d Backspace Backspace
   Down C-k Down C-k Down C-k Down C-k
   C-s M-p Enter C-a C-k

Exercise 1.3
1. (keystrokes not required for this step, simply opening emacs)

2. C-s A M-f M-f Backspace 4 2
   C-s A M-f M-f Backspace 4 2

3. M-< C-s U T F Enter Backspace Backspace S Right Right Backspace A S C I I

4. M-< C-M-s [ ^ [ : a s c i i : ] ]
   C-a C-k
   C-M-s M-p
5. M-< C-s < / o C-e C-o

6. C-x C-c 

Exercise 1.4
1. c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l Enter

2. (keystrokes not required for this step, simply opening emacs)

3. M-> C-r < ! - - C-SP C-e M-w C-r < / h t C-r C-n C-y C-o (this is for <!-- end of HTML...>

4. M-> C-r < p > C-r C-r C-SP M-e M-e M-e C-p M-w C-r s h o u l d C-r C-n C-y C-p C-p C-p C-p C-p C-a C-k Backspace C-n C-n C-d C-n C-d C-n C-d C-n C-d C-n C-n Backspace Backspace(should output nothing)
   
   M-> C-r w i k i C-a C-p C-f C-SP M-e C-n M-w C-r Subm C-r C-r C-n C-n C-y C-n C-n Backspace Backspace C-a C-d C-p C-d(Wikipedia Link)

   M-> D E L C-a C-f C-SP C-e M-w C-r H o m e C-r C-n C-n C-y (DELETE ME)

   M-> C-r d i f M-{ C-f C-SP C-e M-w C-r L a b o r C-r C-n C-n C-y (Chinese)
5. C-s - - - e x C-a C-SP M-> C-w

6. C-x u

7. M-> - - > C-r exer C-p C-p Enter < ! - - C-s I n s t C-p C-p C-p C-e < ! - - C-s D E L C-e < ! - - C-s w i k C-n < ! - - C-s s h o u l d C-e C-b C-b C-b C-b C-b < ! - - C-n C-n C-n C-n <! - - C-s r e s C-e < ! - - (compensate for internal comments)

8. M-< C-s < o l > C-s C-s C-s C-s C-s C-s (7 instances) M-< M-% < o l > Enter < o L > Enter !

9. Ran command diff -u exer1.html exer4.html >exer4.diff in shell, differences are as described

Exercise 1.5
1. M-x mkdir Enter j u n k Enter
2. C-x C-f j u n k / h e l l o . c Enter(Copy-paste from assignment spec) C-x C-s
3. M-x c o m p i l e Enter C-a C-k g c c SP h e l l o . c SP - o SP h i Enter
4. C-x b h e l l o - o u t Enter C-u M-! ./h i 
5. EOF on input

Exercise 1.6
1. C-x b Enter

2. (Type in most-negative-fixnum and most-positive-fixnum) C-j Answer:-2305843009213693952;
   m o s t - p o s i t i v e - f i x n u m C-j C-p ( f o r m a t SP " % x " SP C-e ) C-j
   m o s t - n e g a t i v e - f i x n u m C-j C-p ( f o r m a t SP " % x " SP C-e ) C-j
   Converting to hex, most-negative-fixnum = 2000000000000000
   Converting to hex, most-positive-fixnum = 1fffffffffffffff
   For a 64-bit system, the largest hex value stored is 2^61 - 1 while the most negative value that is stored is -2^61(decimal). Lisp uses 62 bits for the actual value while using the other 2 bits for its own interpretation use. 

3. ( r a n d o m SP " 8 0 5 - 2 8 9 - 4 4 5 " ) C-j Answer: -939030444877108121

4.  ( s e t q SP x SP ( r a n d o m ) ) C-j Answer: x = -1089492633552096079
    ( s e t q SP y SP ( r a n d o m ) ) C-j Answer: y = 1173630360337161004

5. ( s e t q SP p SP ( * SP x SP y ) ) Result: p = 1310471523639966060
   ( s e t q SP r SP ( l o g a n d SP p SP m o s t - p o s i t i v e - f i x n u m ) ) Result: r = 1310471523639966060

6. The product of x and y has the exact same numerical value as r. r is not mathematically correct.

7. No, the two integers x and y are never truly random in a mathematical sense. There must be a certain algorithm that produces what are called pseudo-random numbers. Although it may resemble randomness, the fact that an algorithm exists to produce the numbers means that the numbers are predictable, meaning that the numbers produced are not truly random. In addition, truly random numbers should be of unlimited length, but the computer is constrained to only a certain amount of memory to work with.

8. The smallest possible number is -2^61 while the greatest possible number is 2^61 - 1 which can be estimated to be 2^61. There are a total of 2 * 2^61 or 2^62 possible signed values to choose from within this range. In order to not avoid overflow, x must be within the range -2^30 to 2^30 and y must be within the range -2^31 to 2^31, vice versa (since 2^30 * 2^31 is within the upper bound). There are 2*2^30 = 2^31 values for x (or y), and there are 2*2^31 = 2^32 values for y (or x). Therefore the total probability would be (2^30/2^62)*(2^31/2^62) which equals 1/2^63. This probability is not even considering the cases in which, for example x is randomly chosen greater than 2^31 but less than 2^61, and y is chosen to be less than 2^31 (this could cause overflow, ex. 2^50 * 2^20). The previous case still outweighs cases in which for example, x is less than 2^30 and y is greater than 2^30 but does not cause overflow (example: 2^2 * 2^42) and therefore, it is not relevnt to include them in the probability calculation. The value 1/2^63 is already very close to zero so we can say that if (random) is truly random, then the probability of getting a mathematically correct product is approximately 0%.
   
